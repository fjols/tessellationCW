#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, fractional_even_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;


// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform sampler2D heightMap;
uniform float heightFactor;
uniform vec3 eyePos;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec3 normTC[] ;
in vec2 texCoordsTC[];

// pass along the interpolated values
out vec3 normES ;
out vec3 posES ;
out float heightFactorTE;
out vec2 texCoordsTE;

out float heightTE;
out float visibility;


void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

   normES = interpolate3D(normTC[0], normTC[1], normTC[2]) ;
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   texCoordsTE = interpolate2D(texCoordsTC[0], texCoordsTC[1], texCoordsTC[2]);

   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader

  // NICE NORMALS
  float right = (textureOffset(heightMap, texCoordsTE, ivec2(1, 0)).r)*heightFactor;
  float left = (textureOffset(heightMap, texCoordsTE, ivec2(-1, 0)).r)*heightFactor;
  float up = (textureOffset(heightMap, texCoordsTE, ivec2(0, 1)).r)*heightFactor;
  float down = (textureOffset(heightMap, texCoordsTE, ivec2(0, -1)).r)*heightFactor;

  vec3 normals = vec3((left-right), 2.0, (up - down));
  normals = normalize(normals);
  normES = normals;

  heightFactorTE = heightFactor; // Set the height factor value to the data that will be passed along the pipeline.

  float height = (texture(heightMap, texCoordsTE).x); // Generate height value using height map.
  posES.y = height * heightFactor; // Offset the position on the y axis of posES.
  heightTE = posES.y; // Store this value and pass it along pipeline.

  float gradient = 0.8f;
  float density = 0.0025f;

  float distanceFromCamera = distance(eyePos, posES);
  visibility = exp(-pow((distanceFromCamera * density), gradient));
  visibility = clamp(visibility, 0.0f, 1.0f);

  gl_Position = projection * view * model * vec4(posES, 1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

